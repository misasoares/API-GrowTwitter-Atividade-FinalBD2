generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(100)
  email    String  @unique @db.VarChar(30)
  username String  @unique @db.VarChar(10)
  password String  @db.VarChar(64)
  token    String? @unique
  Tweets   Tweet[]

  Follower Follower[] @relation("follower") //array de quem me segue
  Followed Follower[] @relation("followed") //array de quem eu sigo

  LikesToUser Likes[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("user")
}

model Tweet {
  id      String @id @default(uuid())
  content String @db.VarChar(500)
  type    String @db.VarChar(7) //tweet ou retweet
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @map("user_id")

  Retweet Retweet[]

  Likes Likes[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("tweet")
}

model Retweet {
  id String @id @default(uuid())

  retweetId String @map("retweet_id")

  Tweet           Tweet?  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId String? @map("tweet_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("retweet")
}

model Likes {
  id      String @id @default(uuid())
  UserId  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  TweetId Tweet? @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  userId  String  @map("user_id")
  tweetId String? @map("tweet_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("likes_to_users")
}

model Follower {
  id         String @id @default(uuid())
  User       User   @relation("follower", fields: [userId], references: [id], onDelete: Cascade)
  Followed   User   @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)
  userId     String @map("user_id") //eu vou seguir
  followedId String @unique @map("followed_id") //o fulano de tal

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("follower")
}
